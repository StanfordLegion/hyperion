#!/bin/bash

# Hyperion Runner

set -e

# A POSIX variable
OPTIND=1         # Reset in case getopts has been used previously in the shell.

# Initialize our own variables:
HYPERION_RUNNER_VERSION=$(git rev-parse --verify HEAD)
COMMIT="0"
WD=$(pwd)
source $WD/hyperion.cfg

show_help () {
    echo "Hyperion is used for performance regression tests."
    echo "You can find all configuration options with explanations in hyperion.cfg."
    echo "Options:"
    echo "[commit] If commit is ommitted, HEAD is profiled."
    echo "[taskname] Name of script in tasks subfolder to run, e.g. 'mpi_gasnet'."
    echo "USAGE: hyperion [-t taskname] [-c commit]"
}

# Options Parsing

while getopts ":c:t:" opt; do
    case "$opt" in
    c)  COMMIT=$OPTARG
        ;;
    t)  TASK=$OPTARG
        ;;
    *)
        show_help
        exit 0
        ;;
    esac
done

shift $((OPTIND-1))

[ "$1" = "--" ] && shift

if [ $COMMIT == "0" ]
then
    show_help
    exit 1
fi


# Write simple stats about this run
echo "hyperion version: $HYPERION_VERSION"
echo "host: $(hostname)"

RUN_TIMESTAMP=$(date +%s)
# echo "Welcome to Hyperion run $RUN_TIMESTAMP"
echo "run timestamp: $RUN_TIMESTAMP"

# Check system load before doing CPU taxing work

# could calculate number of processors: grep processor /proc/cpuinfo | wc -l
# for now we just abort if load average > 1
#LOAD_AVERAGE=$(uptime | awk -F'load average:' '{ print $2 }' | cut -f3 -d,) #3 is for 15 min average, most reliable # Ubuntu
# LOAD_AVERAGE=$(uptime | awk -F'load averages:' '{ print $2 }' | cut -f4 -d ' ') #3 is for 15 min average, most reliable # Mac OS X
# comparison_result=$(echo "$LOAD_AVERAGE > 1.0" | bc)
# if [ $comparison_result -eq 1 ]
# then
#     # echo "Load Average is $LOAD_AVERAGE, ABORTING RUN."
#     echo "LOAD_AVERAGE_BEFORE_RUN=$LOAD_AVERAGE"
#     echo "RUN_STATUS=ABORTED"
#     echo "RUN_STATUS_REASON=SYSTEM_LOAD"
#     exit 0
# else
#     # echo "Load Average is $LOAD_AVERAGE, continuing."
#     echo "LOAD_AVERAGE_BEFORE_RUN=$LOAD_AVERAGE"
#     echo "RUN_STATUS=GREENLIT"
# fi

# Checkout source

echo "REPOSITORY_SOURCE=$REPOSITORY_SOURCE"
LOCALREPO_VC_DIR=$LOCALREPO/.git

if [ ! -d $LOCALREPO_VC_DIR ]
then
    echo "Local repository not found. Cloning it..."
    git clone $REPOSITORY_SOURCE $LOCALREPO
    cd $LOCALREPO
else
    # echo "Local repository found. Pulling changes..."
    cd $LOCALREPO && git fetch --all && git reset --hard
fi

# echo "Checking out commit $COMMIT."
git checkout $COMMIT
BRANCHES=$(git branch --contains $COMMIT | xargs)
echo "branches: $BRANCHES"

COMMIT_DATE=$(git show -s --format="%ct" $COMMIT)
echo "commit date: $COMMIT_DATE"

# Writes current commit hash into run file
GIT_COMMIT_HASH=$(git rev-parse --verify HEAD)
echo "commit: $GIT_COMMIT_HASH"
echo "RUN_STATUS=CHECKED_OUT"

# Apply Patches
# no longer needed
# timing patch for circuit example needs to be applied to run old commits
#TIMING_PATCH_COMMIT=4ca4ce62692f85a1e4c7b16e7edf35e3dfe25454
#git cherry-pick $TIMING_PATCH_COMMIT --keep-redundant-commits

# Execute task with runtime measurement

LG_DIR=$(pwd) $WD/tasks/$TASK

# echo "Finished profiling successfully"
echo "RUN_STATUS=SUCCEEDED"

# EOF
