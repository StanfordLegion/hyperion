#!/bin/bash

# Hyperion Scheduler

# Reset in case getopts has been used previously in the shell.
OPTIND=1

# Initialize our own variables:
HYPERION_SCHEDULER_VERSION=$(git rev-parse --verify HEAD)
COMMIT="0"
COMMIT_LIMIT="10"
WD=$(pwd)
source $WD/hyperion.cfg

show_help () {
    echo "Hyperion Scheduler is used to  schedule regression tests."
    echo "You can find all configuration options with explanations in hyperion.cfg."
    echo "USAGE: scheduler [-l maximum number of commits to schedule]"
}

# Options Parsing

while getopts ":l:" opt; do
    case "$opt" in
    l)  COMMIT_LIMIT=$OPTARG
        ;;
    *)
        show_help
        exit 0
        ;;
    esac
done

shift $((OPTIND-1))

[ "$1" = "--" ] && shift

################################################################################

# Ensure all tasks are defined

TASK_NAMES=$(ls $WD/tasks)
for task_name in $TASK_NAMES; do
  3x define -f input task $task_name
  echo "Defined Input for $task_name"
done

# Clone legion repository

LOCALREPO_VC_DIR=$LOCALREPO/.git

if [ ! -d $LOCALREPO_VC_DIR ]
then
    echo "Local repository not found. Cloning it..."
    git clone $REPOSITORY_SOURCE $LOCALREPO
    cd $LOCALREPO
else
    # echo "Local repository found. Pulling changes..."
    cd $LOCALREPO && git fetch --all && git reset --hard
fi

# We're only gettin the $COMMIT_LIMIT most recent commits.
# -so we never accidentally try to profile every commit in the whole history.

COMMITS_IN_REPO=$(git rev-list --remotes | head -n $COMMIT_LIMIT)
COMMITS_3X_HAS_RUN=$( cd $LOCAL_3X_WORKBENCH && sqlite3 $RELATIVE_3X_DB_FILE "SELECT \"_commit\" FROM \"run\" WHERE \"_runTime\" IS NOT NULL;")

# comm requires sorted inputs, so we sort them
# -u uniques the sorted lines; more of a sanity check
# -23 takes the diff ignoring inputs only in 2nd file

NEW_COMMITS=$(comm -23 <( echo -e -n "$COMMITS_IN_REPO" | sort -u ) <( echo -e -n "$COMMITS_3X_HAS_RUN" | sort -u ) )
NUM_OF_NEW_COMMITS=$(echo -e -n "$NEW_COMMITS" | wc -l)

if (( $NUM_OF_NEW_COMMITS > 0 )); then
  echo "===== $NUM_OF_NEW_COMMITS new commits:====="
  echo -e "$NEW_COMMITS"
  for commit in $NEW_COMMITS; do
    3x define -f input commit $commit
    echo "Defining Input for $commit"
  done
  COMMITS=$(echo -e -n "$NEW_COMMITS" | tr '[:blank:]' ',')
  TASKS=$(echo -e -n "$TASK_NAMES" | tr '[:blank:]' ',')
  EDITOR=vim 3x plan commit=$COMMITS task=$TASKS <<<:wq
else
  echo "No new commits"
fi
